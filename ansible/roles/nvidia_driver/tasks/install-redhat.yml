---
# We have to do this because the CentOS mirrors don't keep kernel-headers, etc
# for older kernels.
# - name: Ensure we have kernel-headers installed for the current kernel
#   block:
#     - name: Attempt to install kernel support packages for current version
#       ansible.builtin.yum:
#         name:
#           - "kernel-headers-{{ ansible_kernel }}"
#           - "kernel-tools-{{ ansible_kernel }}"
#           - "kernel-tools-libs-{{ ansible_kernel }}"
#           - "kernel-devel-{{ ansible_kernel }}"
#           - "kernel-debug-devel-{{ ansible_kernel }}"
#         state: present
#       environment: "{{ proxy_env if proxy_env is defined else {} }}"
#   rescue:
#     - name: Update the 4kernel to latest version so we have a supported version
#       ansible.builtin.yum:
#         name:
#           - "kernel"
#           - "kernel-headers"
#           - "kernel-tools"
#           - "kernel-tools-libs"
#           - "kernel-devel"
#           - "kernel-debug-devel"
#         state: present
#       environment: "{{ proxy_env if proxy_env is defined else {} }}"

- name: Reboot to pick up the new kernel
  ansible.builtin.reboot:
  when: not nvidia_driver_skip_reboot

- name: Install dependencies
  ansible.builtin.yum:
    enablerepo: "*_developer_EPEL*"
    name: dkms
    state: present

- name: Blacklist nouveau
  community.general.kernel_blacklist:
    name: nouveau
    state: present

- name: Add repo
  ansible.builtin.yum_repository:
    name: nvidia-cuda
    description: NVIDIA CUDA YUM Repo
    baseurl: "{{ nvidia_driver_rhel_cuda_repo_baseurl }}"
    gpgkey: "{{ nvidia_driver_rhel_cuda_repo_gpgkey }}"
  environment: "{{ proxy_env if proxy_env is defined else {} }}"
  when: nvidia_driver_add_repos | bool

- name: Install driver packages RHEL/CentOS 7 and older
  ansible.builtin.yum:
    enablerepo: "*_developer_EPEL*"
    name:
      - "nvidia-driver-branch-{{ nvidia_driver_version }}"
      - "nvidia-driver-branch-{{ nvidia_driver_version }}-cuda"
      - "nvidia-driver-branch-{{ nvidia_driver_version }}-cuda-libs"
      - "nvidia-fabricmanager-{{ nvidia_driver_version }}"
    state: "{{ nvidia_driver_package_state }}"
    autoremove: "{{ nvidia_driver_package_state == 'absent' }}"
  register: install_driver_rhel7
  environment: "{{ proxy_env if proxy_env is defined else {} }}"
  when: ansible_distribution_major_version < '8' and ansible_distribution != 'OracleLinux'

- name: Install driver packages Oracle Linux 7
  ansible.builtin.yum:
    enablerepo: "*_developer_EPEL*"
    name:
      - "nvidia-driver-branch-{{ nvidia_driver_version }}"
      - "nvidia-driver-branch-{{ nvidia_driver_version }}-cuda"
      - "nvidia-driver-branch-{{ nvidia_driver_version }}-cuda-libs"
      - "nvidia-fabricmanager-{{ nvidia_driver_version }}"
    state: "{{ nvidia_driver_package_state }}"
    autoremove: "{{ nvidia_driver_package_state == 'absent' }}"
  register: install_driver_rhel7
  environment: "{{ proxy_env if proxy_env is defined else {} }}"
  when: ansible_distribution_major_version < '8' and ansible_distribution == 'OracleLinux'

- name: Install driver packages RHEL/CentOS 8 and newer
  ansible.builtin.yum:
    name:
#      - "{{ nvidia_driver_package_version | ternary('@nvidia-driver:'+nvidia_driver_package_version, '@nvidia-driver:'+nvidia_driver_rhel_branch+'-dkms') }}"
      - "{{ '@nvidia-driver:' + nvidia_driver_rhel_branch + '-dkms' }}"
      - "nvidia-fabricmanager-{{ nvidia_driver_version }}"
    state: "{{ nvidia_driver_package_state }}"
    autoremove: "{{ nvidia_driver_package_state == 'absent' }}"
  register: install_driver_rhel8
  environment: "{{ proxy_env if proxy_env is defined else {} }}"
  when: ansible_distribution_major_version > '7'

- name: Set install_driver.changed var for RHEL 7/8
  ansible.builtin.debug:
    msg: Driver installed for RHEL
  when: install_driver_rhel7.changed or install_driver_rhel8.changed
  register: install_driver
  changed_when: install_driver_rhel7.changed or install_driver_rhel8.changed
