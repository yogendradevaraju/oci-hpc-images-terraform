---
- name: Unload nouveau
  community.general.modprobe:
    name: nouveau
    state: absent
  ignore_errors: true
  register: nouveau_unload_error

- name: Ensure GSP firmware is disabled for branch version 510
  ansible.builtin.lineinfile:
    path: /etc/modprobe.d/nvidia-gsp.conf
    line: "options nvidia NVreg_EnableGpuFirmware=0"
    create: true
    mode: '0644'
  when: nvidia_driver_branch | int >= 510

- name: Ubuntu install tasks (canonical repos)
  ansible.builtin.include_tasks: install-ubuntu.yml
  when: ansible_distribution == 'Ubuntu' and (not nvidia_driver_ubuntu_install_from_cuda_repo)

- name: Ubuntu install tasks (CUDA repo)
  ansible.builtin.include_tasks: install-ubuntu-cuda-repo.yml
  when: ansible_distribution == 'Ubuntu' and nvidia_driver_ubuntu_install_from_cuda_repo

- name: Redhat family install tasks
  ansible.builtin.include_tasks: install-redhat.yml
  when: ansible_os_family == 'RedHat'

- name: Create persistenced override dir
  ansible.builtin.file:
    path: /etc/systemd/system/nvidia-persistenced.service.d/
    state: directory
    recurse: true

- name: Configure persistenced service to turn on persistence mode
  ansible.builtin.copy:
    src: nvidia-persistenced-override.conf
    dest: /etc/systemd/system/nvidia-persistenced.service.d/override.conf
    mode: '0644'
  when: nvidia_driver_persistence_mode_on

- name: Remove persistenced service override
  ansible.builtin.file:
    path: /etc/systemd/system/nvidia-persistenced.service.d/override.conf
    state: absent
    mode: '0644'
  when: not nvidia_driver_persistence_mode_on

- name: Enable persistenced
  ansible.builtin.systemd:
    name: nvidia-persistenced
    enabled: true
  when: nvidia_driver_package_state != 'absent'

- name: Enable fabricmanager
  ansible.builtin.systemd:
    name: nvidia-fabricmanager
    enabled: true
  when: nvidia_driver_package_state != 'absent'

- name: Set module parameters
  ansible.builtin.template:
    src: nvidia.conf.j2
    dest: "{{ nvidia_driver_module_file }}"
    mode: '0644'

- name: Reboot after driver install
  ansible.builtin.reboot:
  when: install_driver.changed and not nvidia_driver_skip_reboot

- name: Ensure DKMS modules are built for OL7/OL8
  when: ansible_distribution == 'OracleLinux'
  block:
    - name: Check DKMS module name # noqa no-changed-when
      ansible.builtin.shell: |
        set -o pipefail
        dkms status | grep nvidia | cut -d, -f1 | cut -d: -f1
      register: dkms_module_name

    - name: Check DKMS module state # noqa no-changed-when
      ansible.builtin.shell: |
        set -o pipefail
        dkms status | grep nvidia | cut -d: -f2 | awk '{print $1}'

      register: dkms_module_state

    - name: Show DKMS module status
      ansible.builtin.debug:
        msg: "module name is {{ dkms_module_name.stdout }}, status is {{ dkms_module_state.stdout }}"

    - name: Get default kernel name # noqa no-changed-when command-instead-of-shell
      ansible.builtin.shell: "grubby --default-kernel"
      register: default_kernel_path

    - name: Set kernel version
      ansible.builtin.set_fact:
        kernel_version: "{{ default_kernel_path.stdout | regex_search('/boot/vmlinuz-(.*)$', '\\1') | first }}"

    - name: Run DKMS install # noqa no-changed-when command-instead-of-shell
      ansible.builtin.shell: "dkms install {{ dkms_module_name.stdout }} --force -k {{ kernel_version }}"
      when: dkms_module_state.stdout is defined and dkms_module_state.stdout.find('installed') == -1
